Overview
This practical will introduce you to programming with Java in the Linux environment.  You will learn about writing, compiling, and executing Java sockets programs in Linux.

When writing code during this course you can use whatever text editor you prefer.  The programs you will write do not require you to use an IDE; you should be able to use a text editor such as gedit or vim and a Terminal to do your work. If you prefer, you can use a more powerful environment, such as Visual Code or Eclipse.

As this practical involves the InetAddress and Socket classes, please take some time to read the documentation on them. You can find the documentation at the link provided in Moodle.

Academic Integrity
The files you submit must be your own work. It means that you must not use code automatically generated by Copilot, ChatGPT or any other LLM model. You must not copy any code from websites sharing homework. You may discuss the assignment with others, but the actual code you submit must be your own. If there is anything in your code that you don't understand, seek help during the lab sessions.

You must fully also understand your code and be capable of reproducing and modifying it. There are two requirements to have your assignment marked:

your explanations of the code (during lab hours) in person; AND
submission of source code on Moodle. 
Please take a look at the Assessment notes below.


Task 1: Resolving IPv4 Addresses
In the first part of your practical, you will write a small program to obtain the IPv4 address of a corresponding DNS name.  Create a new source code file in the Linux terminal by typing, for example, gedit resolve.java and pressing enter. The application gedit will open. You can start working on your program.

Your first task is to create a program that resolves a list of names provided on the command line to their corresponding IPv4 addresses. For example:

$ java resolve
Usage: resolve <name1> <name2> ... <nameN>
$ java resolve www.google.com www.facebook.com invalidname.waikato.ac.nz
www.google.com : 172.217.24.36
www.facebook.com : 31.13.78.35
invalidname.waikato.ac.nz : unknown host
To create your program, you will need to import the java.net library and use the InetAddress class.  Make sure you catch all exceptions and ensure that your program prints a usage statement if it is not provided with any command line arguments.  The output should look exactly as above (unless the IP addresses for any of these names changes before you complete this part!)

When you are ready to test your code, save and exit the file, and then type javac resolve.java at the terminal.  If your code is syntactically correct, it will compile without emitting any errors or warnings.  If any errors are printed, please correct them.  When your code compiles without emitting warnings or errors, please type java resolve to see that it runs, and then try resolving a few addresses.

Task 2: Reverse Resolving Internet Addresses
In the second part of your practical, you will write a small program to obtain the DNS names corresponding to a list of IP addresses.  Make a copy of your resolve.java file with the command

cp resolve.java reverse.java
and then edit reverse.java to change the program so it now works as follows:

$ java reverse 10.250.24.30 130.217.208.16 127.0.0.2
10.250.24.30 : kaka.cms.waikato.ac.nz
130.217.208.16 : imap.cms.waikato.ac.nz
127.0.0.2 : no name
Make sure you change the class name of your program so it matches the name of your source code file (reverse), or you will not be able to run your code.  Also, make sure that when you specify an IP address without a name, your code says so, rather than print, for example:

$ java reverse 127.0.0.2
127.0.0.2 : 127.0.0.2
To accomplish this, you will need to use the compareTo method available with the java String class.

Simple network server
Your final task is to create a simple network server which will greet each client that connects and then disconnect them. Name your java file SimpleServer.java.  Create a ServerSocket, allowing it to bind to an available port -- you will need to read the ServerSocket documentation to find out how to do this.  You will also need to have the SimpleServer print out to the console which port it chose so that a client can connect to it -- you will need to read the Socket documentation to find out which method reports the port it is bound to.

$ java SimpleServer
Listening on port 31446
When SimpleServer accepts a new connection, obtain the IP address of the source.  Again, you will need to read the Socket documentation to find out which method reports the IP address of the peer.  Resolve the address to its name and then greet the client.

Create a SimpleClient program to go with your server.  All your SimpleClient has to do is connect to the server, print out whatever the server sends back, and then exit.  The exchange should look like this, if you are running the command at lab-rg07-01.cms.waikato.ac.nz:

$ java SimpleClient lab-rg07-02.cms.waikato.ac.nz 31446
Hello, lab-rg07-01.cms.waikato.ac.nz.
Your IP address is 10.24.33.11
You should be able to login to a neighbour machine using ssh and check that you can communicate with that machine over the network.

Grading
As mentioned before, the grading of your solution depends on your oral explanations about the code (including other similar but hypothetical situations). It also depends on how well it satisfies the specification, how well-formatted and easy to read your code is, and whether each block of code has at least some comment explaining what it does and why. No marks will be given to code that is not demonstrated.

Your code should compile and run as a console program from the Linux command line (i.e. no GUI). Students are encouraged to compile and test their code on the Linux machines in R Block prior to submitting their solutions, but they can use their own machine with Linux.

Make sure your name and student ID number are included in the header documentation of each source code file.  You may include a readme.txt file with any notes you wish the marker to read as they are marking your submission.